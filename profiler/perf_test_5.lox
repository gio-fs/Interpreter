{
    print "\n=== Test 9: Mixed Workload ===";

    class DataProcessor {
        init() {
            this.cache = {};
            this.results = [];
            this.config = {
                "batchSize": 100,
                "timeout": 5000,
                "retries": 3
            };
        }

        process(data) {
            var key = "batch_" + data.get("id");

            if (this.cache.get(key) == nil) {
                var processed = {};
                processed.add("id", data.get("id"));
                processed.add("value", data.get("value") * 2);
                processed.add("metadata", [1, 2, 3, 4, 5]);

                this.cache.add(key, processed);
                this.results.add(processed);
            }

            return this.cache.get(key);
        }

        getResults() {
            return this.results;
        }

        clearCache() {
            this.cache = {};
        }
    }

    var start = clock();

    var processors = [];

    // Create multiple processors
    for i in [1..100] {
        processors.add(DataProcessor());
    }

    // Process data through all processors
    var sum = 0;
    for round in [1..200] {
        for processor in processors {
            var data = {"id": round, "value": round * 10};
            var result = processor.process(data);
            sum = sum + result.get("value");

            //Create temporary objects
            var temp = [];
            for k in [1..20] {
                var o = k;
                var d = {"key": o, "val": round * o};
                temp.add(d);
            }

            // Periodic cache clear (tests old gen cleanup)
            var r = round - (round / 50) * 50;
            if (r == 0) {
                processor.clearCache();
            }
        }
    }

    var end = clock();
    print "Mixed workload: ${end-start}s, sum: ${sum}";
}
